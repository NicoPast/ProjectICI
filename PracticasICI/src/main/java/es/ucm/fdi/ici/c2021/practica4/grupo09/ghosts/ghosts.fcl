FUNCTION_BLOCK FuzzyGhosts	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	BLINKYdistance : REAL;
	PINKYdistance : REAL;
	INKYdistance : REAL;
	SUEdistance : REAL;
	PACMANdistance : REAL;
	
	BLINKYconfidence : REAL;
	PINKYconfidence : REAL;
	INKYconfidence : REAL;
	SUEconfidence : REAL;
	PACMANconfidence : REAL;

	BLINKYedible : REAL;
	PINKYedible : REAL;
	INKYedible : REAL;
	SUEedible : REAL;

END_VAR

VAR_OUTPUT				// Define output variable
	chase : REAL;
	protect : REAL;
	seekHelp : REAL;
END_VAR

FUZZIFY BLINKYdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PINKYdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY INKYdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY SUEdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PACMANdistance		// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY BLINKYconfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY INKYconfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY PINKYconfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY SUEconfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY PACMANconfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY

FUZZIFY BLINKYedible			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,0)(100, 0.25); 
	TERM high := (25, 0)(100, 1);
END_FUZZIFY
FUZZIFY INKYedible			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,0)(100, 0.25) ; 
	TERM high := (25, 0)(100, 1);
END_FUZZIFY
FUZZIFY PINKYedible			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,0)(100, 0.25) ; 
	TERM high := (25, 0)(100, 1);
END_FUZZIFY
FUZZIFY SUEedible			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,0)(100, 0.25) ; 
	TERM high := (25, 0)(100, 1);
END_FUZZIFY

DEFUZZIFY chase			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM low := (0,1) (20,1) (40,0);
	TERM high := (20,0) (40,1) (100,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY protect			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM low := (0,1) (5,1) (15,0);
	TERM high := gauss 30 10;
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY seekHelp			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM low := (0,1) (5,1) (20,0);
	TERM high := gauss 50 10;
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY


RULEBLOCK GhostsRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	RULE 1 : IF BLINKYdistance IS near AND BLINKYconfidence IS high AND BLINKYedible IS high AND PACMANdistance IS near AND PACMANconfidence IS high THEN protect IS high;
	RULE 2 : IF PINKYdistance IS near AND PINKYconfidence IS high AND PINKYedible IS high AND PACMANdistance IS near AND PACMANconfidence IS high THEN protect IS high;
	RULE 3 : IF INKYdistance IS near AND INKYconfidence IS high AND INKYedible IS high AND PACMANdistance IS near AND PACMANconfidence IS high THEN protect IS high;
	RULE 4 : IF SUEdistance IS near AND SUEconfidence IS high AND SUEedible IS high AND PACMANdistance IS near AND PACMANconfidence IS high THEN protect IS high;

	RULE 5 : IF PACMANconfidence IS high THEN chase IS high;
	RULE 6 : IF PACMANconfidence IS low THEN chase IS low;

	RULE 7 : IF BLINKYconfidence IS high AND BLINKYedible IS low THEN seekHelp IS high;
	RULE 8 : IF PINKYconfidence IS high AND PINKYedible IS low THEN seekHelp IS high;
	RULE 9 : IF INKYconfidence IS high AND INKYedible IS low THEN seekHelp IS high;
	RULE 10 : IF SUEconfidence IS high AND SUEedible IS low THEN seekHelp IS high;

END_RULEBLOCK

END_FUNCTION_BLOCK

